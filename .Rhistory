months = 1:12,
save.dir = "./data/sst_raw/",
version = 5)
sst.raw.full <- ersst::sst_load(years = 1950:2016,
months = 1:12,
read.dir = "./data/sst_raw/",
version = 5)
sst.raw.np <- ersst::sst_subset_space(sst.raw.full,
lat.min = 36,
lat.max = 80,
lon.min = 170,
lon.max = 250)
sst.raw.df <- ersst::sst_dataframe(sst.raw.np)
write.csv(sst.raw.df, "./data/sst_raw.csv", row.names = FALSE)
library(ersst)     # see: [https://github.com/michaelmalick/r-ersst](https://github.com/michaelmalick/r-ersst)
library(tidyverse)
library(viridis)
library(plyr)
source("functions.R")
source("sst_anomalies.R")
# load Fraser sockeye brood table,  recent missing estimates of effective female spawners were added to this file
raw_brood_table <- read.delim("data/fraser_brood_table.txt")
# clean up brood table
brood_table <- subset(raw_brood_table, BY < 2015) # drop incomplete brood years
brood_table <- subset(brood_table, BY > 1949) #  and pre-1950
brood_table <- subset(brood_table, stock_name != "Cultus") #  drop cultus which does not have recruitment and spawner estimates in recent years due to contamination from hatchery fish
brood_table$efs <-as.numeric(levels(brood_table$total_effective_female_spawner))[brood_table$total_effective_female_spawner]
brood_table$age.51 <- 0
brood_table$lnRS <-log(brood_table$recruits_no_jacks/brood_table$efs)
brood_table <- brood_table[!is.na(brood_table$lnRS),]
brood_table <- brood_table[brood_table$lnRS != "-Inf",]
brood_table<-brood_table[!is.na(brood_table$Stock.ID),]
# add columns with ocean entry age proportions
brood_table$ocean_0 <- (brood_table$age.21+brood_table$age.31+brood_table$age.41+brood_table$age.51)/brood_table$total_recruits
brood_table$ocean_1 <- (brood_table$age.32+brood_table$age.42+brood_table$age.52+brood_table$age.62)/brood_table$total_recruits
brood_table$ocean_2 <- (brood_table$age.43+brood_table$age.53+brood_table$age.63)/brood_table$total_recruits
# 1st marine year SST
raw.clim <- read.csv(file="data/sst_yr_1_stock_anomalies.csv",header=TRUE)
head(raw.clim)
early.sst <- clim.wgt.avg(brood.table = brood_table,
env.data = raw.clim,
env.covar = "sst_anomaly",
type = "first_year",
out.covar = "early_sst")
View(raw.clim)
## download and process SST data UNCOMMENT IF YOU NEED TO DOWNLOAD RAW SST
ersst::sst_download(years = 1950:2018,
months = 1:12,
save.dir = "./data/sst_raw/",
version = 5)
sst.raw.full <- ersst::sst_load(years = 1950:2018,
months = 1:12,
read.dir = "./data/sst_raw/",
version = 5)
sst.raw.np <- ersst::sst_subset_space(sst.raw.full,
lat.min = 36,
lat.max = 80,
lon.min = 170,
lon.max = 250)
sst.raw.df <- ersst::sst_dataframe(sst.raw.np)
write.csv(sst.raw.df, "./data/sst_raw.csv", row.names = FALSE)
source("functions.R")
source("sst_anomalies.R")
# load Fraser sockeye brood table,  recent missing estimates of effective female spawners were added to this file
raw_brood_table <- read.delim("data/fraser_brood_table.txt")
# clean up brood table
brood_table <- subset(raw_brood_table, BY < 2015) # drop incomplete brood years
brood_table <- subset(brood_table, BY > 1949) #  and pre-1950
brood_table <- subset(brood_table, stock_name != "Cultus") #  drop cultus which does not have recruitment and spawner estimates in recent years due to contamination from hatchery fish
brood_table$efs <-as.numeric(levels(brood_table$total_effective_female_spawner))[brood_table$total_effective_female_spawner]
brood_table$age.51 <- 0
brood_table$lnRS <-log(brood_table$recruits_no_jacks/brood_table$efs)
brood_table <- brood_table[!is.na(brood_table$lnRS),]
brood_table <- brood_table[brood_table$lnRS != "-Inf",]
brood_table<-brood_table[!is.na(brood_table$Stock.ID),]
# add columns with ocean entry age proportions
brood_table$ocean_0 <- (brood_table$age.21+brood_table$age.31+brood_table$age.41+brood_table$age.51)/brood_table$total_recruits
brood_table$ocean_1 <- (brood_table$age.32+brood_table$age.42+brood_table$age.52+brood_table$age.62)/brood_table$total_recruits
brood_table$ocean_2 <- (brood_table$age.43+brood_table$age.53+brood_table$age.63)/brood_table$total_recruits
# 1st marine year SST
raw.clim <- read.csv(file="data/sst_yr_1_stock_anomalies.csv",header=TRUE)
head(raw.clim)
early.sst <- clim.wgt.avg(brood.table = brood_table,
env.data = raw.clim,
env.covar = "sst_anomaly",
type = "first_year",
out.covar = "early_sst")
ggplot(cov_effectsL,aes(x=value, color = covariate, fill = covariate))+
geom_density(alpha=0.5)+
geom_rug()+
scale_x_continuous(limits=c(-1,0.5))+
scale_fill_viridis(discrete = T)+
ylab("")+
xlab("Scaled effect size")+
theme_bw()
larkin <- c("Chilko", "Late Shuswap", "Quesnel", "Stellako", "Gates", " Pitt", " Scotch", "Seymour", " Birkenhead")
# create data frame with normalized survival indices
survial_indices <- ddply(master.bt_w_cov, c("stock_name"),function(x) {
ricker_fit <- lm(x$lnRS~x$efs,na.action=na.exclude)
ricker_resid <- scale(resid(ricker_fit))
ricker_fit_cov <- lm(x$lnRS~x$efs+x$np_pinks_stnd+x$early_sst_stnd,na.action=na.exclude)
ricker_cov_resid <- scale(resid(ricker_fit_cov))
if(unique(x$stock_name=larkin)){
survial_indices <- ddply(master.bt_w_cov, c("stock_name"),function(x) {
ricker_fit <- lm(x$lnRS~x$efs,na.action=na.exclude)
ricker_resid <- scale(resid(ricker_fit))
ricker_fit_cov <- lm(x$lnRS~x$efs+x$np_pinks_stnd+x$early_sst_stnd,na.action=na.exclude)
ricker_cov_resid <- scale(resid(ricker_fit_cov))
if(unique(x$stock_name)=larkin){
unique(x$stock_name)
if(unique(x$stock_name)=larkin)
larkin
x$stock_name
larkin
if(unique(x$stock_name)=larkin)
if(unique(x$stock_name)=Chilko)
if(unique(x$stock_name)="Chilko")
lag(brood_table$efs,-1)
raw_brood_table <- read.delim("data/fraser_brood_table.txt")
# clean up brood table
brood_table <- subset(raw_brood_table, BY < 2015) # drop incomplete brood years
brood_table <- subset(brood_table, BY > 1949) #  and pre-1950
brood_table <- subset(brood_table, stock_name != "Cultus") #  drop cultus which does not have recruitment and spawner estimates in recent years due to contamination from hatchery fish
brood_table$efs <-as.numeric(levels(brood_table$total_effective_female_spawner))[brood_table$total_effective_female_spawner]
lag(brood_table$efs,-1)
lag(brood_table$efs,1)
View(brood_table)
lag(brood_table$efs,2)
lag(1:10, 1)
lag(1:10, -1)
lag(1:10, 3)
# load required packages and functions
library(ersst)     # see: [https://github.com/michaelmalick/r-ersst](https://github.com/michaelmalick/r-ersst)
library(tidyverse)
library(viridis)
# load Fraser sockeye brood table,  recent missing estimates of effective female spawners were added to this file
raw_brood_table <- read.delim("data/fraser_brood_table.txt")
# clean up brood table
brood_table <- subset(raw_brood_table, BY < 2015) # drop incomplete brood years
brood_table <- subset(brood_table, BY > 1949) #  and pre-1950
brood_table <- subset(brood_table, stock_name != "Cultus") #  drop cultus which does not have recruitment and spawner estimates in recent years due to contamination from hatchery fish
brood_table$efs <-as.numeric(levels(brood_table$total_effective_female_spawner))[brood_table$total_effective_female_spawner]
lag(brood_table$efs,2)
raw_brood_table <- read.delim("data/fraser_brood_table.txt")
# clean up brood table
brood_table <- subset(raw_brood_table, BY < 2015) # drop incomplete brood years
brood_table <- subset(brood_table, BY > 1949) #  and pre-1950
brood_table <- subset(brood_table, stock_name != "Cultus") #  drop cultus which does not have recruitment and spawner estimates in recent years due to contamination from hatchery fish
brood_table$efs <-as.numeric(levels(brood_table$total_effective_female_spawner))[brood_table$total_effective_female_spawner]
brood_table$efs_lag1 <-lag(brood_table$efs,1)
brood_table$efs_lag2 <-lag(brood_table$efs,2)
x$stock_name=larkin
larkin <- c("Chilko", "Late Shuswap", "Quesnel", "Stellako", "Gates", " Pitt", " Scotch", "Seymour", " Birkenhead")
x$stock_name=larkin
library(ersst)     # see: [https://github.com/michaelmalick/r-ersst](https://github.com/michaelmalick/r-ersst)
library(tidyverse)
library(viridis)
source("functions.R")
source("sst_anomalies.R")
source("sst_anomalies.R")
library(tidyverse)
library(ersst)     # see: [https://github.com/michaelmalick/r-ersst](https://github.com/michaelmalick/r-ersst)
library(tidyverse)
library(viridis)
source("functions.R")
# source("sst_anomalies.R")
# load Fraser sockeye brood table,  recent missing estimates of effective female spawners were added to this file
raw_brood_table <- read.delim("data/fraser_brood_table.txt")
# clean up brood table
brood_table <- subset(raw_brood_table, BY < 2015) # drop incomplete brood years
brood_table <- subset(brood_table, BY > 1949) #  and pre-1950
brood_table <- subset(brood_table, stock_name != "Cultus") #  drop cultus which does not have recruitment and spawner estimates in recent years due to contamination from hatchery fish
brood_table$efs <-as.numeric(levels(brood_table$total_effective_female_spawner))[brood_table$total_effective_female_spawner]
brood_table$efs_lag1 <-lag(brood_table$efs,1)
brood_table$efs_lag2 <-lag(brood_table$efs,2)
brood_table$age.51 <- 0
brood_table$lnRS <-log(brood_table$recruits_no_jacks/brood_table$efs)
brood_table <- brood_table[!is.na(brood_table$lnRS),]
brood_table <- brood_table[brood_table$lnRS != "-Inf",]
brood_table<-brood_table[!is.na(brood_table$Stock.ID),]
# add columns with ocean entry age proportions
brood_table$ocean_0 <- (brood_table$age.21+brood_table$age.31+brood_table$age.41+brood_table$age.51)/brood_table$total_recruits
brood_table$ocean_1 <- (brood_table$age.32+brood_table$age.42+brood_table$age.52+brood_table$age.62)/brood_table$total_recruits
brood_table$ocean_2 <- (brood_table$age.43+brood_table$age.53+brood_table$age.63)/brood_table$total_recruits
# 1st marine year SST
raw.clim <- read.csv(file="data/sst_yr_1_stock_anomalies.csv",header=TRUE)
head(raw.clim)
early.sst <- clim.wgt.avg(brood.table = brood_table,
env.data = raw.clim,
env.covar = "sst_anomaly",
type = "first_year",
out.covar = "early_sst")
# Pink competitors (empirical data through 2015, extrapolated based on last four years of data for odd and even lines thereafter)
raw.comp <- read.csv(file="data/pink_abundance_2017_12_08.csv",header=TRUE)
extrap_pinks <- matrix(NA,4,16,dimnames = list(seq(1:4),colnames(raw.comp)))
extrap_pinks[1:4,1] <- c(2016,2017,2018,2019)
extrap_pinks[1:4,16] <- c(median(raw.comp$Total[c(57,59,61,63)]),
median(raw.comp$Total[c(58,60,62,64)]),
median(raw.comp$Total[c(57,59,61,63)]),
median(raw.comp$Total[c(58,60,62,64)]))
raw.comp <- rbind(raw.comp,extrap_pinks)
head(raw.comp)
np.pink <- pink.wgt.avg(brood.table = brood_table,
pink.data = raw.comp,
pink.covar = "Total",
type = "second_year",
out.covar = "np_pinks")
# merge datasets
master.1 <- merge(brood_table, early.sst, by=c("BY","Stock.ID"),all.x=T)
master.bt <- merge(master.1, np.pink, by=c("BY","Stock.ID"),all.x=T)
master.bt <- master.bt[order(master.bt$Stock.ID),]
# add derived columns
master.bt_w_cov <- plyr::ddply(master.bt, .(Stock.ID), transform,
early_sst_stnd = scale(early_sst)[ , 1],
np_pinks_stnd = scale(np_pinks)[ , 1])
master.bt_w_cov <- plyr::ddply(master.bt, .(Stock.ID), transform,
early_sst_stnd = scale(early_sst)[ , 1],
np_pinks_stnd = scale(np_pinks)[ , 1])
master.bt_w_cov <- plyr::ddply(master.bt, .(Stock.ID), transform,
early_sst_stnd = scale(early_sst)[ , 1],
np_pinks_stnd = scale(np_pinks)[ , 1])
library(plyr)
master.bt_w_cov <- plyr::ddply(master.bt, .(Stock.ID), transform,
early_sst_stnd = scale(early_sst)[ , 1],
np_pinks_stnd = scale(np_pinks)[ , 1])
# export to output
write.csv(master.bt_w_cov, "data/master_brood_table_covar.csv", row.names=FALSE)
unique(master.bt_w_cov$"stock_name")
x<-subset(master.bt_w_cov,stock_name=="Stellako")
if(x$stock_name=larkin)
f(x$stock_name==larkin)
if(x$stock_name==larkin)
x$stock_name==larkin
unique(x$stock_name)==larkin
unique(x$stock_name)=larkin
(unique(x$stock_name) %in% larkin
unique(x$stock_name) %in% larkin
# which stocks are assumed to be governed by Larkin type SR dynamics?
larkin <- c("Chilko", "L.Shuswap", "Quesnel", "Stellako", "Gates", " Pitt", " Scotch", "Seymour", " Birkenhead")
# create data frame with normalized survival indices
survial_indices <- plyr::ddply(master.bt_w_cov, c("stock_name"),function(x) {
ricker_fit <- lm(x$lnRS~x$efs,na.action=na.exclude)
ricker_resid <- scale(resid(ricker_fit))
ricker_fit_cov <- lm(x$lnRS~x$efs+x$np_pinks_stnd+x$early_sst_stnd,na.action=na.exclude)
ricker_cov_resid <- scale(resid(ricker_fit_cov))
if(unique(x$stock_name) %in% larkin){
ricker_fit <- lm(x$lnRS~x$efs,na.action=na.exclude)
ricker_resid <- scale(resid(ricker_fit))
ricker_fit_cov <- lm(x$lnRS~x$efs+x$np_pinks_stnd+x$early_sst_stnd,na.action=na.exclude)
ricker_cov_resid <- scale(resid(ricker_fit_cov))
}
lnRS <- scale(x$lnRS)
brood_year <- x$BY
xx <- data.frame(brood_year,ricker_resid,ricker_cov_resid,lnRS)
})
# create data frame with normalized survival indices
survial_indices <- plyr::ddply(master.bt_w_cov, c("stock_name"),function(x) {
SR_fit <- lm(x$lnRS~x$efs,na.action=na.exclude)
SR_resid <- scale(resid(SR_fit))
SR_fit_cov <- lm(x$lnRS~x$efs+x$np_pinks_stnd+x$early_sst_stnd,na.action=na.exclude)
SR_cov_resid <- scale(resid(SR_fit_cov))
if(unique(x$stock_name) %in% larkin){
SR_fit <- lm(x$lnRS~x$efs+x$efs_lag1+x$efs_lag2,na.action=na.exclude)
SR_resid <- scale(resid(SR_fit))
SR_fit_cov <- lm(x$lnRS~x$efs+x$efs_lag1+x$efs_lag2+x$np_pinks_stnd+x$early_sst_stnd,na.action=na.exclude)
SR_cov_resid <- scale(resid(SR_fit_cov))
}
lnRS <- scale(x$lnRS)
brood_year <- x$BY
xx <- data.frame(brood_year,SR_resid,SR_cov_resid,lnRS)
})
survial_indicesL<-gather(survial_indices,survival_index,value,SR_resid:lnRS)
# create data frame with covariate effects
cov_effects <- plyr::ddply(master.bt_w_cov, c("stock_name"),function(x) {
SR_fit_cov <- lm(x$lnRS~x$efs+x$np_pinks_stnd+x$early_sst_stnd,na.action=na.exclude)
pink <- SR_fit_cov$coefficients[3]
sst <- SR_fit_cov$coefficients[4]
xx <- data.frame(pink,sst)
})
cov_effectsL<-gather(cov_effects,covariate,value,pink:sst)
# create data frame with covariate effects
cov_effects <- plyr::ddply(master.bt_w_cov, c("stock_name"),function(x) {
SR_fit_cov <- lm(x$lnRS~x$efs+x$np_pinks_stnd+x$early_sst_stnd,na.action=na.exclude)
if(unique(x$stock_name) %in% larkin){
SR_fit_cov <- lm(x$lnRS~x$efs+x$efs_lag1+x$efs_lag2+x$np_pinks_stnd+x$early_sst_stnd,na.action=na.exclude)
}
pink <- SR_fit_cov$coefficients[3]
sst <- SR_fit_cov$coefficients[4]
xx <- data.frame(pink,sst)
})
cov_effectsL<-gather(cov_effects,covariate,value,pink:sst)
ggplot(cov_effectsL,aes(x=value, color = covariate, fill = covariate))+
geom_density(alpha=0.5)+
geom_rug()+
scale_x_continuous(limits=c(-1,0.5))+
scale_fill_viridis(discrete = T)+
ylab("")+
xlab("Scaled effect size")+
ggplot(survial_indicesL, aes(brood_year, value,colour = survival_index)) +
geom_line()+
facet_wrap(~stock_name,nrow=4)+
scale_colour_viridis_d()+
xlab("Brood year")+
ylab("Index value")+
theme_bw()
ggplot(survial_indicesL[survial_indicesL$brood_year>2007,], aes(brood_year, value, colour = survival_index)) +
geom_line()+
facet_wrap(~stock_name,nrow=4)+
scale_x_continuous(breaks = c(2008,2010,2012,2014))+
scale_colour_viridis_d()+
xlab("Brood year")+
ylab("Index value")+
theme_bw()
print(cov_effects)
cov_effects <- plyr::ddply(master.bt_w_cov, c("stock_name"),function(x) {
SR_fit_cov <- lm(x$lnRS~x$efs+x$np_pinks_stnd+x$early_sst_stnd,na.action=na.exclude)
if(unique(x$stock_name) %in% larkin){
SR_fit_cov <- lm(x$lnRS~x$efs+x$efs_lag1+x$efs_lag2+x$np_pinks_stnd+x$early_sst_stnd,na.action=na.exclude)
}
pink <- round(SR_fit_cov$coefficients[3],digits=2)
sst <- round(SR_fit_cov$coefficients[4],digits=2)
xx <- data.frame(pink,sst)
})
print(cov_effects)
ggplot(inf_agt_resid_data,aes(load_std, resid_value, color=Stock))+
geom_point()+
facet_wrap(~ agent,nrow=5)+
xlab("load (standardized)")+
ylab("residual")+
theme_bw()
ggplot(inf_agt_resid_data,aes(prev_std, resid_value, color=Stock))+
geom_point()+
facet_wrap(~ agent,nrow=5)+
xlab("prevalence")+
ylab("residual")+
theme_bw()
library(lme4)
library(rstanarm) # https://mc-stan.org/users/documentation/case-studies/tutorial_rstanarm.html
library(ggplot2)
library(plotrix)
inf_agt_resid_data <- read.csv("data/ONNE_productivity_infection_analysis.csv")
inf_std <- plyr::ddply(inf_agt_resid_data, c("agent"),function(x) {
scaled_prev <- scale(x$prev)
scaled_load <- scale(x$mean_load_all)
xx <- data.frame(scaled_prev, scaled_load)
})
inf_agt_resid_data$prev_std <- inf_std[,2]
inf_agt_resid_data$load_std <- inf_std[,3]
agents <- unique(inf_agt_resid_data$agent)
inf_agt_resid_data$Stock <- inf_agt_resid_data$Stock_Analysis
head(inf_agt_resid_data)
ggplot(inf_agt_resid_data,aes(prev_std, resid_value, color=Stock))+
geom_point()+
facet_wrap(~ agent,nrow=5)+
xlab("prevalence")+
ylab("residual")+
theme_bw()
coefs <-matrix(NA,
nrow = length(agents),
ncol = 2,
dimnames = list(agents,c("est","se")))
for(i in agents){
data <- subset(inf_agt_resid_data, agent==i)
model_ind <- lmer(resid_value ~ 0 + prev_std + (prev_std |Stock_Analysis)+(1|Year),
data = data,
REML = F)
coefs[i,] <- summary(model_ind)$coefficients[1, 1:2]
}
coefs_order <- coefs[order(coefs[,1]),]
par(mfrow=c(1,1), mar=c(3,1,1,1),oma=c(0.5,0.5,0.5,0.5))
plotCI(x = coefs_order[,1],
y = seq(1,length(agents)),
ui = (coefs_order[,1]+(coefs_order[,2]*2)),
li = (coefs_order[,1]-(coefs_order[,2]*2)),
err = "x",
sfrac = 0 ,
gap = 0,
yaxt = "n",
xaxt = "n",
ylab = "",
xlab = "",
xlim = c(-1.75,1),
pch = 16,
lwd = 2,
scol = "grey")
text(rep(-1.75,length(agents)),
seq(1,length(agents)),
labels = rownames(coefs_order),
pos =4,
font = 2)
axis(1, at = c(-1, -0.5, 0, 0.5, 1))
abline(v = 0, lty = 2)
box(col="grey")
mtext("effect size",1,line=2.2, cex=1.1)
mtext("Prevalence",3,line=0.25)
coefs_stan <- read.csv("prev_coefs_stan.csv")
coefs_order <- coefs_stan[order(coefs_stan[,3]),]
par(mfrow=c(1,1), mar=c(3,1,1,1),oma=c(0.5,0.5,0.5,0.5))
plotCI(x = coefs_order[,3],
y = seq(1,length(agents)),
li = (coefs_order[,1]),
ui = (coefs_order[,5]),
err = "x",
sfrac = 0 ,
gap = 0,
yaxt = "n",
xaxt = "n",
ylab = "",
xlab = "",
xlim = c(-1.75,1),
pch = 16,
scol = "grey")
coefs_stan
coefs
coefs_order
coefs_order
coefs_order[,3]
coefs_stan <- coefs_stan[,-1]
coefs_stan
coefs_order <- coefs_stan[order(coefs_stan[,3]),]
par(mfrow=c(1,1), mar=c(3,1,1,1),oma=c(0.5,0.5,0.5,0.5))
plotCI(x = coefs_order[,3],
y = seq(1,length(agents)),
li = (coefs_order[,1]),
ui = (coefs_order[,5]),
err = "x",
sfrac = 0 ,
gap = 0,
yaxt = "n",
xaxt = "n",
ylab = "",
xlab = "",
xlim = c(-1.75,1),
pch = 16,
scol = "grey")
plotCI(x = coefs_order[,3],
y = seq(1,length(agents)),
li = (coefs_order[,2]),
ui = (coefs_order[,4]),
err = "x",
sfrac = 0 ,
gap = 0,
pch = 16,
add = TRUE,
lwd = 3,
scol = "grey")
text(rep(-1.75,length(agents)),
seq(1,length(agents)),
labels = rownames(coefs_order),
pos = 4,
font = 2,
cex=0.95)
axis(1, at = c(-1, -0.5, 0, 0.5, 1))
abline(v = 0, lty = 2)
box(col="grey")
mtext("effect size",1,line=2.2, cex=1.1)
mtext("Prevalence",3,line=0.25)
coefs_order
coefs_order
rownames(coefs_order)
coefs_stan <- read.csv("int_coefs_stan.csv")
rownames(coefs_stan) <- coefs_stan[,1]
coefs_stan <- coefs_stan[,-1] # drop first column with agent names
coefs_stan
#SSHI ANALYSIS SOCKEYE STAGE II
#Teffer
#### Load packages
setwd("~/Documents.nosync/DFO PDF/Data/SSHI-sockeye")
library(lme4)
library(rstanarm) # https://mc-stan.org/users/documentation/case-studies/tutorial_rstanarm.html
library(ggplot2)
library(plotrix)
library(tidyverse)
library(gridExtra)
library(bayesplot)
theme_set(bayesplot::theme_default(base_family = "sans"))
library(shinystan)
#### Read in data and clean
#Global metric (averaged across all stocks in SW)
inf_agt_resid_data_gl <- read.csv("global_ONNE_productivity_infection_analysis.csv")
inf_agt_resid_data_gl$mean_load_all <- inf_agt_resid_data_gl$mean_load #add col for mean_load_all
inf_agt_resid_data_gl$mean_load_all[is.na(inf_agt_resid_data_gl$mean_load_all)] <- 0 #replace NA with 0
inf_std <- plyr::ddply(inf_agt_resid_data_gl, c("agent"),function(x) {
scaled_prev <- scale(x$prev)
scaled_load <- scale(x$mean_load_all)
xx <- data.frame(scaled_prev, scaled_load)
})
inf_agt_resid_data_gl$prev_std <- inf_std[,2]
inf_agt_resid_data_gl$load_std <- inf_std[,3]
agents <- unique(inf_agt_resid_data_gl$agent)
inf_agt_resid_data_gl$Stock <- inf_agt_resid_data_gl$Stock_Analysis
head(inf_agt_resid_data_gl)
#plot raw data - Prevalence
ggplot(inf_agt_resid_data_gl,aes(prev, resid_value, color=Stock, shape=factor(Year)))+
geom_smooth(aes(prev, resid_value, group=Stock), method = "lm", se=F, size=.2)+
geom_point()+
scale_shape_manual(values=1:nlevels(factor(inf_agt_resid_data_gl$Year))) +
facet_wrap(~ agent,ncol=4, scales = "free")+
xlab("prevalence")+
ylab("residual")+
theme_bw()
#plot raw data - Load
ggplot(inf_agt_resid_data_gl,aes(log10(mean_load), resid_value, color=Stock, shape=factor(Year)))+
geom_smooth(aes(log10(mean_load), resid_value, group=Stock), method = "lm", se=F, size=.2)+
geom_point()+
scale_shape_manual(values=1:nlevels(factor(inf_agt_resid_data_gl$Year))) +
facet_wrap(~ agent,ncol=4, scales="free")+
xlab("log10 load")+
ylab("residual")+
theme_bw()
#load parameter estimates
coefs_stan <- read.csv("prev_coefs_stan_full model_global_sw.csv")
